name: E2E Tests

on:
  deployment_status:
    environments:
      - 'Preview - gp-ui'
      - 'Production - gp-ui'
jobs:
  run-e2e-tests:
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
      - name: Print Workflow Trigger Event
        env:
          GITHUB_EVENT_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "GitHub Event Context: $GITHUB_EVENT_CONTEXT"

      - name: Check out the repository to the runner
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'

      - name: Install Dependencies for gp-webapp
        run: npm install

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Link Vercel Project
        run: |
          vercel link --token ${{ secrets.VERCEL_TOKEN }} --yes --project gp-ui --scope good-party

      - name: Wait for gp-ui deployment and capture URL
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          
          # Function to get latest deployment status
          get_deployment_status() {
            gh api \
              -H "Accept: application/vnd.github+json" \
              "/repos/goodparty/gp-ui/deployments" \
              -q ".[] | select(.ref == \"$BRANCH_NAME\" and .environment == \"Preview - gp-ui\") | .statuses_url" \
              | head -n1 \
              | xargs gh api \
              -q ".[] | select(.state != null) | .state" \
              | head -n1
          }
          
          # Wait for deployment to complete (timeout after 5 minutes)
          echo "Waiting for gp-ui deployment to complete..."
          TIMEOUT=300
          while [ $TIMEOUT -gt 0 ]; do
            STATUS=$(get_deployment_status)
            echo "Current deployment status: $STATUS"
            
            if [ "$STATUS" = "success" ]; then
              break
            elif [ "$STATUS" = "failure" ] || [ "$STATUS" = "error" ]; then
              echo "Deployment failed!"
              exit 1
            fi
            
            sleep 10
            TIMEOUT=$((TIMEOUT - 10))
          done
          
          if [ $TIMEOUT -le 0 ]; then
            echo "Timeout waiting for deployment!"
            exit 1
          fi
          
          # Get the deployment URL
          DEPLOYMENT_URL=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/goodparty/gp-ui/deployments" \
            -q ".[] | select(.ref == \"$BRANCH_NAME\" and .environment == \"Preview - gp-ui\") | .statuses_url" \
            | head -n1 \
            | xargs gh api \
            -q ".[] | select(.state == \"success\") | .target_url" \
            | head -n1)
          
          echo "Found gp-ui deployment URL: $DEPLOYMENT_URL"
          echo "BASE_URL=$DEPLOYMENT_URL" >> "$GITHUB_ENV"

      - name: Checkout test-automation Repository
        uses: actions/checkout@v4
        with:
          repository: thegoodparty/test-automation
          token: ${{ secrets.GH_PAT_TEST }}
          path: test-automation

      - name: Install Playwright Dependencies in test-automation Repo
        run: |
          cd test-automation
          npm install
          npx playwright install --with-deps

      - name: Run Playwright Tests
        run: |
          cd test-automation
          npx playwright test
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TEST_RUN_NAME: "Playwright Test Run - Branch: ${{ github.ref_name }} - Commit: ${{ github.sha }}"
          NODE_PATH: ${{ secrets.NODE_PATH }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_API_URL: ${{ secrets.TESTRAIL_API_URL }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
          TEST_USER_ADMIN: ${{ secrets.TEST_USER_ADMIN }}
          TEST_USER_ADMIN_PASSWORD: ${{ secrets.TEST_USER_ADMIN_PASSWORD }}

      - name: Notify Slack Workflow
        if: always()
        env:
          SLACK_WORKFLOW_WEBHOOK: ${{ secrets.SLACK_WORKFLOW_WEBHOOK }}
        run: |
          # Set STATUS and COLOR based on job status
          STATUS=$(if [[ "${{ job.status }}" == "success" ]]; then echo "Pass"; else echo "Fail"; fi)
          COLOR=$(if [[ "${{ job.status }}" == "success" ]]; then echo "good"; else echo "danger"; fi)
          
          # Send the Slack notification
          curl -X POST -H "Content-type: application/json" \
          --data '{
            "text": "Playwright Test Results ('"${STATUS}"')",
            "attachments": [
              {
                "color": "'"${COLOR}"'",
                "fields": [
                  { "title": "Branch", "value": "'"${{ github.ref_name }}"'", "short": true },
                  { "title": "Commit", "value": "'"${{ github.sha }}"'", "short": true },
                  { "title": "Vercel URL", "value": "'"${{ env.BASE_URL }}"'", "short": true }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View Test Runs",
                    "url": "https://goodparty.testrail.io/index.php?/runs/overview/1",
                    "style": "primary"
                  }
                ]
              }
            ]
          }' $SLACK_WORKFLOW_WEBHOOK
