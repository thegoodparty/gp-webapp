name: E2E Tests

on:
  deployment_status:
    environments:
      - 'Preview - gp-ui'
      - 'Production - gp-ui'
      
  schedule:
  # Run at midnight PST (8 AM UTC)
  - cron: '0 8 * * *'
    
jobs:
  e2e-tests:
    name: Run E2E Tests on Staging
    runs-on: ubuntu-22.04
    if: github.event.deployment_status.state == 'success'
    # Explicit permissions for accessing workflow artifacts
    permissions:
      actions: write
      contents: read
    steps:
      - name: Print Workflow Trigger Event
        env:
          GITHUB_EVENT_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "GitHub Event Context: $GITHUB_EVENT_CONTEXT"

      - name: Check out the repository to the runner
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Dependencies for gp-webapp
        run: npm install

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Link Vercel Project
        run: |
          vercel link --token ${{ secrets.VERCEL_TOKEN }} --yes --project gp-ui --scope good-party

      - name: Capture Deployment URL
        run: |
          # Get the Vercel preview URL directly from the deployment status
          DEPLOYMENT_URL="${{ github.event.deployment_status.target_url }}"
          echo "Using deployment URL: $DEPLOYMENT_URL"
          echo "BASE_URL=$DEPLOYMENT_URL" >> "$GITHUB_ENV"

      - name: Checkout test-automation Repository
        uses: actions/checkout@v4
        with:
          repository: thegoodparty/test-automation
          token: ${{ secrets.GH_PAT_TEST }}
          path: test-automation
          ref: p2v_refactor

      - name: Install Playwright Dependencies in test-automation Repo
        run: |
          cd test-automation
          npm install
          npx playwright install --with-deps

      - name: Run Playwright Tests
        run: |
          cd test-automation
          npx playwright test --workers=1
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TEST_RUN_NAME: "Playwright Test Run - Branch: ${{ github.ref_name }} - Commit: ${{ github.sha }}"
          NODE_PATH: ${{ secrets.NODE_PATH }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_API_URL: ${{ secrets.TESTRAIL_API_URL }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
          TEST_USER_ADMIN: ${{ secrets.TEST_USER_ADMIN }}
          TEST_USER_ADMIN_PASSWORD: ${{ secrets.TEST_USER_ADMIN_PASSWORD }}

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: test-automation/playwright-report
          retention-days: 7

      - name: Upload Playwright traces and results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results
          path: test-automation/test-results
          retention-days: 7

      - name: Add artifact links to summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.runId;
            const { owner, repo } = context.repo;
            const { data } = await github.rest.actions.listWorkflowRunArtifacts({ owner, repo, run_id: runId });
            if (!data.artifacts || data.artifacts.length === 0) {
              await core.summary
                .addHeading('Artifacts')
                .addRaw('No artifacts found for this run.')
                .write();
            } else {
              core.summary.addHeading('Artifacts');
              for (const artifact of data.artifacts) {
                const uiUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}/artifacts/${artifact.id}`;
                core.summary.addRaw(`- [${artifact.name}](${uiUrl}) (${artifact.size_in_bytes} bytes)\n`);
              }
              await core.summary.write();
            }

      - name: Notify Slack Workflow
        if: always()
        env:
          SLACK_WORKFLOW_WEBHOOK: ${{ secrets.SLACK_WORKFLOW_WEBHOOK }}
        run: |
          # Set STATUS and COLOR based on job status
          STATUS=$(if [[ "${{ job.status }}" == "success" ]]; then echo "Pass"; else echo "Fail"; fi)
          COLOR=$(if [[ "${{ job.status }}" == "success" ]]; then echo "good"; else echo "danger"; fi)
          
          # Send the Slack notification
          curl -X POST -H "Content-type: application/json" \
          --data '{
            "text": "Playwright Test Results ('"${STATUS}"')",
            "attachments": [
              {
                "color": "'"${COLOR}"'",
                "fields": [
                  { "title": "Branch", "value": "'"${{ github.ref_name }}"'", "short": true },
                  { "title": "Commit", "value": "'"${{ github.sha }}"'", "short": true },
                  { "title": "Vercel URL", "value": "'"${{ env.BASE_URL }}"'", "short": true }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View Test Runs",
                    "url": "https://goodparty.testrail.io/index.php?/runs/overview/1",
                    "style": "primary"
                  }
                ]
              }
            ]
          }' $SLACK_WORKFLOW_WEBHOOK
