name: E2E Tests

on:
  deployment_status:
    environments:
      - 'Preview - gp-ui'
      - 'Production - gp-ui'
  schedule:
    # Run at midnight PST (8 AM UTC)
    - cron: '0 8 * * *'
    
jobs:
  setup:
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    outputs:
      test_run_id: ${{ steps.create-run.outputs.test_run_id }}
    steps:
      - name: Check out test-automation repository
        uses: actions/checkout@v4
        with:
          repository: thegoodparty/test-automation
          token: ${{ secrets.GH_PAT_TEST }}
          path: test-automation

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'

      - name: Install Dependencies
        run: |
          cd test-automation
          npm install
          npx playwright install --with-deps

      - name: Run Global Setup
        id: global-setup
        run: |
          cd test-automation
          node -r ts-node/register globalSetup.js
        env:
          CI: "true"
          BASE_URL: ${{ env.BASE_URL }}
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TEST_USER_ADMIN: ${{ secrets.TEST_USER_ADMIN }}
          TEST_USER_ADMIN_PASSWORD: ${{ secrets.TEST_USER_ADMIN_PASSWORD }}

      - name: Upload auth states and test run ID
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            test-automation/auth.json
            test-automation/admin-auth.json
            test-automation/testRunId.txt
          retention-days: 1

  run-e2e-tests:
    needs: setup
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    strategy:
      matrix:
        shard: [0, 1, 2, 3]
      fail-fast: false
    
    steps:
      - name: Check out test-automation repository
        uses: actions/checkout@v4
        with:
          repository: thegoodparty/test-automation
          token: ${{ secrets.GH_PAT_TEST }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'

      - name: Install Dependencies
        run: |
          cd test-automation
          npm install
          npx playwright install --with-deps

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-artifacts
          path: test-automation

      - name: Run Playwright Tests
        run: |
          cd test-automation
          echo "Running shard ${{ matrix.shard }}/4"
          npx playwright test --shard=${{ matrix.shard }}/4 --reporter=list
        env:
          CI: "true"
          BASE_URL: ${{ env.BASE_URL }}
          TEST_WORKER_INDEX: ${{ matrix.shard }}
          TEST_WORKERS_COUNT: 4
          SKIP_SETUP: "true"
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}

  teardown:
    needs: [setup, run-e2e-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check out test-automation repository
        uses: actions/checkout@v4
        with:
          repository: thegoodparty/test-automation
          token: ${{ secrets.GH_PAT_TEST }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'

      - name: Install Dependencies
        run: |
          cd test-automation
          npm install

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-artifacts
          path: test-automation

      - name: Run Global Teardown
        run: |
          cd test-automation
          node -r ts-node/register globalTeardown.js
        env:
          CI: "true"
          BASE_URL: ${{ env.BASE_URL }}
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
          TEST_USER_ADMIN: ${{ secrets.TEST_USER_ADMIN }}
          TEST_USER_ADMIN_PASSWORD: ${{ secrets.TEST_USER_ADMIN_PASSWORD }}

      - name: Notify Slack Workflow
        if: always()
        env:
          SLACK_WORKFLOW_WEBHOOK: ${{ secrets.SLACK_WORKFLOW_WEBHOOK }}
        run: |
          # Set STATUS and COLOR based on job status
          STATUS=$(if [[ "${{ job.status }}" == "success" ]]; then echo "Pass"; else echo "Fail"; fi)
          COLOR=$(if [[ "${{ job.status }}" == "success" ]]; then echo "good"; else echo "danger"; fi)
          
          # Send the Slack notification
          curl -X POST -H "Content-type: application/json" \
          --data '{
            "text": "Playwright Test Results ('"${STATUS}"')",
            "attachments": [
              {
                "color": "'"${COLOR}"'",
                "fields": [
                  { "title": "Branch", "value": "'"${{ github.ref_name }}"'", "short": true },
                  { "title": "Commit", "value": "'"${{ github.sha }}"'", "short": true },
                  { "title": "Vercel URL", "value": "'"${{ env.BASE_URL }}"'", "short": true }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View Test Runs",
                    "url": "https://goodparty.testrail.io/index.php?/runs/overview/1",
                    "style": "primary"
                  }
                ]
              }
            ]
          }' $SLACK_WORKFLOW_WEBHOOK
