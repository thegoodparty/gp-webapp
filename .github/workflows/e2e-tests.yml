name: E2E Tests

on:
  deployment_status:
    environments:
      - 'Preview - gp-ui'
      - 'Production - gp-ui'
    schedule:
    # Run at midnight PST (8 AM UTC)
    - cron: '0 8 * * *'
    
jobs:
  start-runner:
    name: Start EC2 Runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PAT }}
          ec2-image-id: ${{ secrets.EC2_IMAGE_ID }}
          ec2-instance-type: t3.large
          subnet-id: ${{ secrets.SUBNET_ID }}
          security-group-id: ${{ secrets.SECURITY_GROUP_ID }}
          pre-runner-script: |
            #!/bin/bash
            # Setup larger log directory
            sudo mkdir -p /mnt/logs
            sudo mount -t tmpfs -o size=10G tmpfs /mnt/logs
            sudo mkdir -p /mnt/logs/runner
            sudo ln -sf /mnt/logs/runner /actions-runner/_diag
            
            # Install Docker
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Configure Docker storage driver and log options
            sudo tee /etc/docker/daemon.json > /dev/null <<EOF
            {
              "storage-driver": "overlay2",
              "log-driver": "json-file",
              "log-opts": {
                "max-size": "10m",
                "max-file": "3"
              }
            }
            EOF
            sudo systemctl restart docker
            
            # Pull Playwright Docker image
            sudo docker pull mcr.microsoft.com/playwright:v1.42.1-jammy
            
            # Create a script to run tests in Docker
            cat << 'EOF' > /usr/local/bin/run-in-playwright
            #!/bin/bash
            sudo docker run --rm \
              -v $(pwd):/work \
              -v /mnt/logs:/logs \
              -w /work \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              mcr.microsoft.com/playwright:v1.42.1-jammy "$@"
            EOF
            
            sudo chmod +x /usr/local/bin/run-in-playwright
            
            # Make the script available to the runner
            echo 'export PATH="/usr/local/bin:$PATH"' >> ~/.bashrc

      - name: Show disk usage before cleanup
        run: df -h
          
      - name: Clean up and remove unused packages
        run: |
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          docker system prune --all --volumes --force || true
          npm cache clean --force || true
      
      - name: Show disk usage after cleanup
        run: df -h
          

  run-e2e-tests:
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    if: github.event.deployment_status.state == 'success'
    steps:
      - name: Disk usage before installation
        run: df -h

      - name: Print Workflow Trigger Event
        env:
          GITHUB_EVENT_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "GitHub Event Context: $GITHUB_EVENT_CONTEXT"

      - name: Check out the repository to the runner
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'

      - name: Install Dependencies for gp-webapp
        run: npm install

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Link Vercel Project
        run: |
          vercel link --token ${{ secrets.VERCEL_TOKEN }} --yes --project gp-ui --scope good-party

      - name: Capture Deployment URL
        run: |
          # Get the Vercel preview URL directly from the deployment status
          DEPLOYMENT_URL="${{ github.event.deployment_status.target_url }}"
          
          echo "Using deployment URL: $DEPLOYMENT_URL"
          echo "BASE_URL=$DEPLOYMENT_URL" >> "$GITHUB_ENV"

      - name: Checkout test-automation Repository
        uses: actions/checkout@v4
        with:
          repository: thegoodparty/test-automation
          token: ${{ secrets.GH_PAT_TEST }}
          path: test-automation

      - name: Install Playwright Dependencies in test-automation Repo
        run: |
          cd test-automation
          npm install
          npx playwright install

      - name: Run Playwright Tests
        run: |
          cd test-automation
          npx playwright test
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TEST_RUN_NAME: "Playwright Test Run - Branch: ${{ github.ref_name }} - Commit: ${{ github.sha }}"
          NODE_PATH: ${{ secrets.NODE_PATH }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_API_URL: ${{ secrets.TESTRAIL_API_URL }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
          TEST_USER_ADMIN: ${{ secrets.TEST_USER_ADMIN }}
          TEST_USER_ADMIN_PASSWORD: ${{ secrets.TEST_USER_ADMIN_PASSWORD }}

      - name: Notify Slack Workflow
        if: always()
        env:
          SLACK_WORKFLOW_WEBHOOK: ${{ secrets.SLACK_WORKFLOW_WEBHOOK }}
        run: |
          # Set STATUS and COLOR based on job status
          STATUS=$(if [[ "${{ job.status }}" == "success" ]]; then echo "Pass"; else echo "Fail"; fi)
          COLOR=$(if [[ "${{ job.status }}" == "success" ]]; then echo "good"; else echo "danger"; fi)
          
          # Send the Slack notification
          curl -X POST -H "Content-type: application/json" \
          --data '{
            "text": "Playwright Test Results ('"${STATUS}"')",
            "attachments": [
              {
                "color": "'"${COLOR}"'",
                "fields": [
                  { "title": "Branch", "value": "'"${{ github.ref_name }}"'", "short": true },
                  { "title": "Commit", "value": "'"${{ github.sha }}"'", "short": true },
                  { "title": "Vercel URL", "value": "'"${{ env.BASE_URL }}"'", "short": true }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View Test Runs",
                    "url": "https://goodparty.testrail.io/index.php?/runs/overview/1",
                    "style": "primary"
                  }
                ]
              }
            ]
          }' $SLACK_WORKFLOW_WEBHOOK

  stop-runner:
    name: Stop EC2 Runner
    needs: [start-runner, run-e2e-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PAT }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
