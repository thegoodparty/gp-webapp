name: E2E Tests

on:
  deployment_status:
    environment:
      - 'Preview - gp-ui'
      - 'Production - gp-ui'
  schedule:
    # Run at midnight PST (8 AM UTC)
    - cron: '0 8 * * *'

jobs:
  run-e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Print Workflow Trigger Event
        env:
          GITHUB_EVENT_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "GitHub Event Context: $GITHUB_EVENT_CONTEXT"

      - name: Check out the repository to the runner
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'

      - name: Install Dependencies for gp-webapp
        run: npm install

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Link Vercel Project
        run: |
          vercel link --token ${{ secrets.VERCEL_TOKEN }} --yes --project gp-ui --scope good-party

      - name: Wait for Vercel Preview Deployment
        if: github.event_name == 'deployment_status'
        uses: patrickedqvist/wait-for-vercel-preview@v1.3.1
        id: waitForVercel
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          max_timeout: 300  # 5 minutes
          check_interval: 5

      - name: Ensure jq is installed
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update && sudo apt-get install -y jq
          else
            echo "jq is already installed"
            jq --version
          fi

      - name: Capture Deployment URL
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Use production URL for scheduled runs
            echo "BASE_URL=https://goodparty.org" >> $GITHUB_ENV
          else
            if [[ "${{ github.event_name }}" == "deployment_status" ]]; then
              # Query Vercel API to get the latest deployment for gp-ui
              VERCEL_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
                "https://api.vercel.com/v6/deployments?projectId=gp-ui&limit=1&state=READY")
              
              echo "Vercel API Response: $VERCEL_RESPONSE"
              
              LATEST_DEPLOYMENT=$(echo $VERCEL_RESPONSE | jq -r '.deployments[0].url')
              
              if [ "$LATEST_DEPLOYMENT" = "null" ] || [ -z "$LATEST_DEPLOYMENT" ]; then
                echo "Error: Could not fetch latest deployment URL"
                echo "Full Vercel Response:"
                echo "$VERCEL_RESPONSE" | jq '.'
                exit 1
              fi
              
              DEPLOYMENT_URL="https://${LATEST_DEPLOYMENT}"
            else
              DEPLOYMENT_URL=${{ github.event.deployment_status.environment_url }}
            fi
            
            if [ -z "$DEPLOYMENT_URL" ] || [ "$DEPLOYMENT_URL" = "https://null" ]; then
              echo "Error: Invalid deployment URL"
              echo "Event name: ${{ github.event_name }}"
              echo "Event context: ${{ toJson(github.event) }}"
              exit 1
            fi
            
            echo "Using deployment URL: $DEPLOYMENT_URL"
            echo "BASE_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
          fi

      # Add verification step
      - name: Verify BASE_URL
        run: |
          if [ -z "$BASE_URL" ] || [ "$BASE_URL" = "https://null" ]; then
            echo "Error: BASE_URL is not set correctly"
            echo "Current BASE_URL: $BASE_URL"
            exit 1
          fi
          echo "Verified BASE_URL: $BASE_URL"

      - name: Checkout test-automation Repository
        uses: actions/checkout@v4
        with:
          repository: thegoodparty/test-automation
          token: ${{ secrets.GH_PAT_TEST }}
          path: test-automation

      - name: Install Playwright Dependencies in test-automation Repo
        run: |
          cd test-automation
          npm install
          npx playwright install --with-deps

      - name: Set Test Run Name
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Format date as YYYY-MM-DD for scheduled runs
            DATE=$(TZ=America/Los_Angeles date '+%Y-%m-%d')
            echo "TEST_RUN_NAME=[$DATE] Daily Test Run" >> $GITHUB_ENV
          else
            echo "TEST_RUN_NAME=Playwright Test Run - Branch: ${{ github.ref_name }} - Commit: ${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: Run Playwright Tests
        run: |
          cd test-automation
          npx playwright test
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TEST_RUN_NAME: ${{ env.TEST_RUN_NAME }}
          NODE_PATH: ${{ secrets.NODE_PATH }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_API_URL: ${{ secrets.TESTRAIL_API_URL }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
          TEST_USER_ADMIN: ${{ secrets.TEST_USER_ADMIN }}
          TEST_USER_ADMIN_PASSWORD: ${{ secrets.TEST_USER_ADMIN_PASSWORD }}

      - name: Notify Slack Workflow
        if: always()
        env:
          SLACK_WORKFLOW_WEBHOOK: ${{ secrets.SLACK_WORKFLOW_WEBHOOK }}
        run: |
          # Set STATUS and COLOR based on job status
          STATUS=$(if [[ "${{ job.status }}" == "success" ]]; then echo "Pass"; else echo "Fail"; fi)
          COLOR=$(if [[ "${{ job.status }}" == "success" ]]; then echo "good"; else echo "danger"; fi)
          
          # Send the Slack notification
          curl -X POST -H "Content-type: application/json" \
          --data '{
            "text": "Playwright Test Results ('"${STATUS}"')",
            "attachments": [
              {
                "color": "'"${COLOR}"'",
                "fields": [
                  { "title": "Branch", "value": "'"${{ github.ref_name }}"'", "short": true },
                  { "title": "Commit", "value": "'"${{ github.sha }}"'", "short": true },
                  { "title": "Vercel URL", "value": "'"${{ env.BASE_URL }}"'", "short": true }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View Test Runs",
                    "url": "https://goodparty.testrail.io/index.php?/runs/overview/1",
                    "style": "primary"
                  }
                ]
              }
            ]
          }' $SLACK_WORKFLOW_WEBHOOK
