name: Deployment and Playwright Tests

on:
  pull_request:
    branches:
      - develop
      - qa
      - master
  push:
    branches:
      - develop
      - qa
      - master

jobs:
  test:
    if: >
      (github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success') ||
      (github.event_name == 'pull_request' || github.event_name == 'push')
    name: Playwright Functional Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository to the runner
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'

      - name: Install Dependencies for gp-webapp
        run: npm install

      - name: Deploy to Vercel
        id: deploy
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }}

      - name: Capture Vercel Deployment URL
        run: |
          DEPLOYMENT_URL=$(vercel --token ${{ secrets.VERCEL_TOKEN }} --yes)
          echo "BASE_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

      - name: Checkout test-automation Repository
        uses: actions/checkout@v4
        with:
          repository: thegoodparty/test-automation
          token: ${{ secrets.GH_PAT_TEST }}
          path: test-automation

      - name: Install Playwright Dependencies in test-automation Repo
        run: |
          cd test-automation
          npm install
          npx playwright install --with-deps

      - name: Run Playwright Tests
        run: |
          cd test-automation
          npx playwright test --reporter=json > playwright-results.json
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TEST_RUN_NAME: "Playwright Test Run - Branch: ${{ github.ref_name }} - Commit: ${{ github.sha }}"
          
      - name: Report Test Results
        if: failure()
        run: |
          echo "Playwright tests failed. Review the test results."
          
      - name: Notify Slack Workflow with Test Results
        if: always()
        env:
          SLACK_WORKFLOW_WEBHOOK: ${{ secrets.SLACK_WORKFLOW_WEBHOOK }}
        run: |
          # Parse Playwright results
          RESULTS_FILE=playwright-results.json
          TOTAL_TESTS=$(jq '.stats.expected' $RESULTS_FILE)
          FAILED_COUNT=$(jq '.stats.unexpected' $RESULTS_FILE)
          RUN_DURATION=$(jq '.stats.duration' $RESULTS_FILE)
          FAILED_SUMMARY=$(jq -r '.suites[].specs[].tests[] | select(.results[].status == "unexpected") | "- \(.title)"' $RESULTS_FILE | tr '\n' ',' | sed 's/,$//')

          # Convert duration to seconds
          RUN_DURATION_SECS=$(awk "BEGIN {print $RUN_DURATION / 1000}")

          # Determine overall run status
          if [ "$FAILED_COUNT" -gt 0 ]; then
            RUN_STATUS="failed"
          else
            RUN_STATUS="passed"
          fi

          # Generate the Slack notification
          curl -X POST -H "Content-type: application/json" \
          --data '{
            "text": "Playwright Test Results",
            "attachments": [
              {
                "color": "'"$(if [ "$FAILED_COUNT" -gt 0 ]; then echo "danger"; else echo "good"; fi)"'",
                "fields": [
                  { "title": "Branch", "value": "'"${{ github.ref_name }}"'", "short": true },
                  { "title": "Commit", "value": "'"${{ github.sha }}"'", "short": true },
                  { "title": "Total Tests", "value": "'"$TOTAL_TESTS"'", "short": true },
                  { "title": "Failed Tests", "value": "'"$FAILED_COUNT"'", "short": true },
                  { "title": "Duration", "value": "'"${RUN_DURATION_SECS}s"'", "short": true }
                ]
              },
              {
                "title": "Failed Tests",
                "text": "'"$FAILED_SUMMARY"'",
                "color": "danger"
              }
            ]
          }' $SLACK_WORKFLOW_WEBHOOK